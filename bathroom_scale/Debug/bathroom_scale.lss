
bathroom_scale.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004be  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e5  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f6  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00000f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000248  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000013ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  9e:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include "adc.h"

void adc_init(void)
{
	// AREF = AVcc
	ADMUX |= (1<<REFS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	// ADC Enable and prescaler of 64
	// 4000000/64 = 62500
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 68       	ori	r24, 0x86	; 134
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <adc_read>:
}

uint16_t adc_read(uint8_t ch)
{
	// Select ADC channel
	ADMUX |= (ADMUX & 0xF8)|ch;
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	20 81       	ld	r18, Z
  c2:	90 81       	ld	r25, Z
  c4:	98 7f       	andi	r25, 0xF8	; 248
  c6:	92 2b       	or	r25, r18
  c8:	89 2b       	or	r24, r25
  ca:	80 83       	st	Z, r24
	// start single convertion
	ADCSRA |= (1<<ADSC);
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	// wait for conversion to complete
	while(ADCSRA & (1<<ADSC));
  d6:	80 81       	ld	r24, Z
  d8:	86 fd       	sbrc	r24, 6
  da:	fd cf       	rjmp	.-6      	; 0xd6 <adc_read+0x1a>
	// Return value from ADC
	return (ADC);
  dc:	80 91 78 00 	lds	r24, 0x0078
  e0:	90 91 79 00 	lds	r25, 0x0079
  e4:	08 95       	ret

000000e6 <main>:
volatile int timer_factor = 0;

int main (void)
{
	// Interrupt setup for sleep mode
	interrupt_init();
  e6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <interrupt_init>
	
	// temp for debugging
	DDRB |= (1 << PINB0);
  ea:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1 << PINB0); 
  ec:	28 9a       	sbi	0x05, 0	; 5
			PORTB &= ~(1 << PINB0);
			// Disable interrupt
			cli();
			// Power down
			sleep_now();
			PORTB ^= (1 << PINB0);
  ee:	d1 e0       	ldi	r29, 0x01	; 1
	// Select ADC channel
	uint8_t ch = 0b00000000;
	
	while(1)
	{
		if (asleep) 
  f0:	80 91 00 01 	lds	r24, 0x0100
  f4:	90 91 01 01 	lds	r25, 0x0101
  f8:	89 2b       	or	r24, r25
  fa:	a1 f0       	breq	.+40     	; 0x124 <main+0x3e>
		{
			PORTB &= ~(1 << PINB0);
  fc:	28 98       	cbi	0x05, 0	; 5
			// Disable interrupt
			cli();
  fe:	f8 94       	cli
			// Power down
			sleep_now();
 100:	0e 94 0e 01 	call	0x21c	; 0x21c <sleep_now>
			PORTB ^= (1 << PINB0);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8d 27       	eor	r24, r29
 108:	85 b9       	out	0x05, r24	; 5
			// Continue here at start up
			// Disable interrupt for setting registers
			cli();
 10a:	f8 94       	cli
			external_clock_init();
 10c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <external_clock_init>
			interrupt_init();
 110:	0e 94 ee 00 	call	0x1dc	; 0x1dc <interrupt_init>
			timer_init();
 114:	0e 94 f6 00 	call	0x1ec	; 0x1ec <timer_init>
			uart_init();
 118:	0e 94 20 01 	call	0x240	; 0x240 <uart_init>
			adc_init();
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
			sei();
 120:	78 94       	sei
 122:	e6 cf       	rjmp	.-52     	; 0xf0 <main+0xa>
		} else if (!asleep) {
 124:	80 91 00 01 	lds	r24, 0x0100
 128:	90 91 01 01 	lds	r25, 0x0101
 12c:	89 2b       	or	r24, r25
 12e:	01 f7       	brne	.-64     	; 0xf0 <main+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	2f e7       	ldi	r18, 0x7F	; 127
 132:	88 e3       	ldi	r24, 0x38	; 56
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x50>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x5a>
 140:	00 00       	nop
			// Temp for debugging
			_delay_ms(100);
			// PORTB ^= (1 << PINB0);
			// Read from ADC
			uint16_t result = adc_read(ch);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 5e 00 	call	0xbc	; 0xbc <adc_read>
 148:	c8 2f       	mov	r28, r24
			// Send result
			uart_send_byte((result >> 8));
 14a:	89 2f       	mov	r24, r25
 14c:	0e 94 2c 01 	call	0x258	; 0x258 <uart_send_byte>
			uart_send_byte(result);
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 2c 01 	call	0x258	; 0x258 <uart_send_byte>
			uart_send_byte('\n');
 156:	8a e0       	ldi	r24, 0x0A	; 10
 158:	0e 94 2c 01 	call	0x258	; 0x258 <uart_send_byte>
 15c:	c9 cf       	rjmp	.-110    	; 0xf0 <main+0xa>

0000015e <__vector_11>:
		}
	}
}

ISR(TIMER1_COMPA_vect)
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
	if (timer_factor)
 16c:	80 91 02 01 	lds	r24, 0x0102
 170:	90 91 03 01 	lds	r25, 0x0103
 174:	89 2b       	or	r24, r25
 176:	61 f0       	breq	.+24     	; 0x190 <__vector_11+0x32>
	{
		// Power down
		timer_factor = 0;
 178:	10 92 03 01 	sts	0x0103, r1
 17c:	10 92 02 01 	sts	0x0102, r1
		asleep = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 01 01 	sts	0x0101, r25
 188:	80 93 00 01 	sts	0x0100, r24
		cli();	
 18c:	f8 94       	cli
 18e:	09 c0       	rjmp	.+18     	; 0x1a2 <__vector_11+0x44>
	} else {
		// Timer x2
		timer_factor++;
 190:	80 91 02 01 	lds	r24, 0x0102
 194:	90 91 03 01 	lds	r25, 0x0103
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	90 93 03 01 	sts	0x0103, r25
 19e:	80 93 02 01 	sts	0x0102, r24
	}
}
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <__vector_1>:

ISR(INT0_vect)
{
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
	// Power up
	asleep = 0;
 1ba:	10 92 01 01 	sts	0x0101, r1
 1be:	10 92 00 01 	sts	0x0100, r1
	cli();
 1c2:	f8 94       	cli
}
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <external_clock_init>:
void external_clock_init()
{
	// Important writing procedure: Datasheet - 9.11
	// Interrupt must be disabled!
	// Enable clock prescale
	CLKPR = ( 1 << CLKPCE );
 1ce:	e1 e6       	ldi	r30, 0x61	; 97
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	80 83       	st	Z, r24
	// Prescale 4
	CLKPR = ( 1 << CLKPS1 );
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 83       	st	Z, r24
 1da:	08 95       	ret

000001dc <interrupt_init>:
}

void interrupt_init()
{
	// Set pulldown resistor
	PORTD |= (1 << PIND2);
 1dc:	5a 9a       	sbi	0x0b, 2	; 11
	// Interrupt on any egde INT0
	EICRA |= (1 << ISC00) | (1 << ISC01);
 1de:	e9 e6       	ldi	r30, 0x69	; 105
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	83 60       	ori	r24, 0x03	; 3
 1e6:	80 83       	st	Z, r24
	// Enable INT0
	EIMSK |= (1 << INT0);
 1e8:	e8 9a       	sbi	0x1d, 0	; 29
 1ea:	08 95       	ret

000001ec <timer_init>:
}

void timer_init()
{
	TCNT1 = 0x0000;
 1ec:	10 92 85 00 	sts	0x0085, r1
 1f0:	10 92 84 00 	sts	0x0084, r1
	// Set CTC mode
	TCCR1B |= (1 << WGM12);
 1f4:	e1 e8       	ldi	r30, 0x81	; 129
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	80 83       	st	Z, r24
	// Set clock prescale to 1024
	TCCR1B |= (1 << CS12) | (1 << CS10);
 1fe:	80 81       	ld	r24, Z
 200:	85 60       	ori	r24, 0x05	; 5
 202:	80 83       	st	Z, r24
	// Overflow compare at 16/4 seconds
	OCR1A = 62500;
 204:	84 e2       	ldi	r24, 0x24	; 36
 206:	94 ef       	ldi	r25, 0xF4	; 244
 208:	90 93 89 00 	sts	0x0089, r25
 20c:	80 93 88 00 	sts	0x0088, r24
	// Enable timer compare interrupt
	TIMSK1 |= (1 << OCIE1A);
 210:	ef e6       	ldi	r30, 0x6F	; 111
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	82 60       	ori	r24, 0x02	; 2
 218:	80 83       	st	Z, r24
 21a:	08 95       	ret

0000021c <sleep_now>:
}

void sleep_now()
{
	// Set sleep mode to POWER DOWN
	SMCR |= (1 << SM1);
 21c:	83 b7       	in	r24, 0x33	; 51
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	83 bf       	out	0x33, r24	; 51
	// Set sleep enable
	sleep_enable();
 222:	83 b7       	in	r24, 0x33	; 51
 224:	81 60       	ori	r24, 0x01	; 1
 226:	83 bf       	out	0x33, r24	; 51
	// Enable interrupt
	sei();
 228:	78 94       	sei
	// Put the device to sleep
	sleep_mode();
 22a:	83 b7       	in	r24, 0x33	; 51
 22c:	81 60       	ori	r24, 0x01	; 1
 22e:	83 bf       	out	0x33, r24	; 51
 230:	88 95       	sleep
 232:	83 b7       	in	r24, 0x33	; 51
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	83 bf       	out	0x33, r24	; 51
	// Continue from this point and disable sleep mode
	sleep_disable();
 238:	83 b7       	in	r24, 0x33	; 51
 23a:	8e 7f       	andi	r24, 0xFE	; 254
 23c:	83 bf       	out	0x33, r24	; 51
 23e:	08 95       	ret

00000240 <uart_init>:
#include <avr/io.h>

void uart_init(void)
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE>>8);
 240:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(UBRR_VALUE);
 244:	89 e1       	ldi	r24, 0x19	; 25
 246:	80 93 c4 00 	sts	0x00C4, r24
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	80 93 c2 00 	sts	0x00C2, r24
	// Enable transmission and reception
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 250:	88 e1       	ldi	r24, 0x18	; 24
 252:	80 93 c1 00 	sts	0x00C1, r24
 256:	08 95       	ret

00000258 <uart_send_byte>:
}

void uart_send_byte(uint8_t u8Data)
{
	//wait while previous byte is completed
	while(!(UCSR0A&(1<<UDRE0)));
 258:	e0 ec       	ldi	r30, 0xC0	; 192
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	90 81       	ld	r25, Z
 25e:	95 ff       	sbrs	r25, 5
 260:	fd cf       	rjmp	.-6      	; 0x25c <uart_send_byte+0x4>
	// Transmit data
	UDR0 = u8Data;
 262:	80 93 c6 00 	sts	0x00C6, r24
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
